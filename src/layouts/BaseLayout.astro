---
import "@styles/global.css";
import Footer from "@components/UI/Footer.astro";
import { ViewTransitions } from "astro:transitions";

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
}

const {
  title = "Human",
  description = "A modern configuration language for AI agents",
  image = "/og-image.png",
  noindex = false,
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- View Transitions for smooth navigation -->
    <ViewTransitions />

    <!-- Apply theme immediately before any content renders -->
    <script is:inline>
      // Apply theme before first paint to prevent flash
      function applyTheme() {
        const theme =
          localStorage.getItem("theme") ||
          (window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light");

        if (theme === "dark") {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }

        const meta = document.querySelector('meta[name="theme-color"]');
        if (meta) {
          meta.content = theme === "dark" ? "#030713" : "#ffffff";
        }
      }

      // Apply theme immediately
      applyTheme();

      // Persist theme across View Transitions
      document.addEventListener("astro:after-swap", applyTheme);
    </script>

    <!-- Preconnect to critical origins -->
    <link rel="preconnect" href={Astro.site} crossorigin />
    <link rel="dns-prefetch" href={Astro.site} />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.site)} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(image, Astro.site)} />

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#ffffff" />

    <!-- Robots -->
    {noindex && <meta name="robots" content="noindex, nofollow" />}

    <link rel="modulepreload" href="/_astro/hoisted.js" />

    <link
      rel="preload"
      href="/fonts/EBGaramond-Italic-VariableFont_wght.ttf"
      as="font"
      type="font/ttf"
      crossorigin="anonymous"
    />

    <!-- Performance hints -->
    <meta name="color-scheme" content="light dark" />
    <meta name="supported-color-schemes" content="light dark" />

    <!-- Copy code blocks script -->
    <script is:inline>
      // Auto-enhance code blocks with copy functionality
      function enhanceCodeBlocks() {
        const codeBlocks = document.querySelectorAll("pre code");

        codeBlocks.forEach((codeElement) => {
          const preElement = codeElement.parentElement;

          // Skip if already enhanced
          if (
            preElement.parentElement?.classList.contains("code-block-wrapper")
          ) {
            return;
          }

          // Create wrapper
          const wrapper = document.createElement("div");
          wrapper.className = "code-block-wrapper relative group";

          // Move the pre element into the wrapper
          preElement.parentNode.insertBefore(wrapper, preElement);
          wrapper.appendChild(preElement);

          // Add copy button
          const copyButton = document.createElement("button");
          copyButton.className = "copy-button";
          copyButton.setAttribute("data-code", codeElement.textContent || "");
          copyButton.setAttribute("aria-label", "Copy code to clipboard");
          copyButton.setAttribute("title", "Copy code");

          // Add icons
          copyButton.innerHTML = `
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="copy-icon" aria-hidden="true">
              <rect width="14" height="14" x="8" y="8" rx="2" ry="2" />
              <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />
            </svg>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="check-icon" aria-hidden="true">
              <path d="M20 6 9 17l-5-5" />
            </svg>
          `;

          // Add click handler
          copyButton.addEventListener("click", async (e) => {
            e.preventDefault();
            const code = copyButton.getAttribute("data-code");
            if (!code) return;

            try {
              await navigator.clipboard.writeText(code);

              // Visual feedback
              copyButton.classList.add("copied");

              // Reset after 2 seconds
              setTimeout(() => {
                copyButton.classList.remove("copied");
              }, 2000);
            } catch (err) {
              // Fallback for older browsers
              const textArea = document.createElement("textarea");
              textArea.value = code;
              document.body.appendChild(textArea);
              textArea.select();
              document.execCommand("copy");
              document.body.removeChild(textArea);

              // Visual feedback for fallback
              copyButton.classList.add("copied");
              setTimeout(() => {
                copyButton.classList.remove("copied");
              }, 2000);
            }
          });

          wrapper.appendChild(copyButton);
        });
      }

      // Initialize on page load
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", enhanceCodeBlocks);
      } else {
        enhanceCodeBlocks();
      }

      // Re-initialize for dynamic content (Astro islands)
      document.addEventListener("astro:page-load", enhanceCodeBlocks);

      // Also run after a short delay to catch any late-rendered content
      setTimeout(enhanceCodeBlocks, 100);
    </script>
  </head>
  <body class="min-h-screen flex flex-col" data-instant-intensity="viewport">
    <slot />
    <Footer />

    <!-- Web Vitals - Load only after page is interactive -->
    <script type="module">
      // Defer web vitals loading to reduce initial JS
      if ("requestIdleCallback" in window) {
        requestIdleCallback(() => {
          import(
            "https://unpkg.com/web-vitals@3/dist/web-vitals.attribution.js?module"
          ).then(({ onCLS, onINP, onLCP, onFCP, onTTFB }) => {
            const sendToAnalytics = ({ name, value, rating }) => {
              // Only log in dev, send to analytics in production
              if (import.meta.env.DEV) {
                console.log(`${name}: ${value} (${rating})`);
              }
            };

            onCLS(sendToAnalytics);
            onINP(sendToAnalytics);
            onLCP(sendToAnalytics);
            onFCP(sendToAnalytics);
            onTTFB(sendToAnalytics);
          });
        });
      }
    </script>

    <!-- View Transitions handle prefetching automatically -->
  </body>
</html>
